@using EntityLayer.Concrete
@model List<Message>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="h3 mb-0">Gelen Mesajlar</h5>

        @{
            // Okunmamış mesaj sayısını hesapla
            var unreadCount = Model.Count(x => x.Status);
            if (unreadCount > 0)
            {
                <span class="badge badge-pill badge-danger">@unreadCount Yeni</span>
            }
        }
    </div>
    <div class="card-body p-0">
        <div class="list-group list-group-flush">

            @if (Model.Count == 0)
            {
                <div class="list-group-item">
                    <p class="text-muted text-center mb-0">Gösterilecek mesaj bulunmuyor.</p>
                </div>
            }
            else
            {
                @foreach (var item in Model)
                {
                    // Status'a göre (okundu/okunmadı) class'ı dinamik olarak ayarla
                    // Okunmadıysa (Status==false) arka planı açık gri ve yazıyı kalın yap
                    var itemClass = item.Status ? "list-group-item-light font-weight-bold " : "";

                    <a href="javascript:void(0);" class="list-group-item list-group-item-action flex-column align-items-start @itemClass">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">@item.Name</h5>
                            <small>@item.Date.ToString("dd MMM yyyy")</small>
                        </div>
                        <p class="mb-1 text-muted small">@item.Mail</p>
                        <p class="mb-0">
                            @* İçerik 100 karakterden uzunsa kısalt ve sonuna "..." ekle *@
                            @(item.Content.Length > 100 ? item.Content.Substring(0, 100) + "..." : item.Content)
                        </p>
                    </a>
                }
            }
        </div>
    </div>
</div>